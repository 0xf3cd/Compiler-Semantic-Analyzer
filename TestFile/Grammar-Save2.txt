26
S' 1
S 2
<Body> 3
<Decl> 4
<FuncDecl> 5
<VarDecl> 6
<FormalParams> 7
<StmtBlock> 8
<ParamList> 9
<Param> 10
<InnerDecl> 11
<Stmts> 12
<InnerVarDecl> 13
<Stmt> 14
<IfStmt> 15
<WhileStmt> 16
<ReturnStmt> 17
<AssignStmt> 18
<CompExprsn> 19
<AddExprsn> 20
<RelOp> 21
<Item> 22
<Factor> 23
<FuncCall> 24
<ActualArgs> 25
<ArgList> 26

26
int 1
void 2
if 3
else 4
while 5
return 6
ID 7
num 8
= 9
+ 10
- 11
* 12
/ 13
== 14
!= 15
< 16
<= 17
> 18
>= 19
; 20
, 21
( 22
) 23
{ 24
} 25
ε 29

57
S' -> S $

S -> <Body> $
S -> <Body> S $

<Body> -> <Decl> $

<Decl> -> int ID <VarDecl> $
<Decl> -> int ID <FuncDecl> $
<Decl> -> void ID <FuncDecl> $

<VarDecl> -> ; $
<VarDecl> -> = <AddExprsn> ; $

<FuncDecl> -> ( <FormalParams> ) <StmtBlock> $

<FormalParams> -> <ParamList> $
<FormalParams> -> void $
<FormalParams> -> ε $

<ParamList> -> <Param> $
<ParamList> -> <Param> , <ParamList> $

<Param> -> int ID $

<StmtBlock> -> { <InnerDecl> <Stmts> } $

<InnerDecl> -> <InnerVarDecl> ; <InnerDecl> $
<InnerDecl> -> ε $

<InnerVarDecl> -> int ID $
<InnerVarDecl> -> int ID = <AddExprsn> $

<Stmts> -> <Stmt> <Stmts> $
<Stmts> -> <Stmt> $

<Stmt> -> <IfStmt> $
<Stmt> -> <WhileStmt> $
<Stmt> -> <ReturnStmt> $
<Stmt> -> <AssignStmt> $

<AssignStmt> -> ID = <AddExprsn> ; $

<ReturnStmt> -> return <AddExprsn> ; $
<ReturnStmt> -> return ; $

<WhileStmt> -> while ( <AddExprsn> <CompExprsn> ) <StmtBlock> $

<IfStmt> -> if ( <AddExprsn> <CompExprsn> ) <StmtBlock> else <StmtBlock> $
<IfStmt> -> if ( <AddExprsn> <CompExprsn> ) <StmtBlock> $

<CompExprsn> -> ε $
<CompExprsn> -> <RelOp> <AddExprsn> $

<RelOp> -> < $
<RelOp> -> <= $
<RelOp> -> > $
<RelOp> -> >= $
<RelOp> -> == $
<RelOp> -> != $

<AddExprsn> -> <Item> + <AddExprsn> $
<AddExprsn> -> <Item> - <AddExprsn> $
<AddExprsn> -> <Item> $

<Item> -> <Factor> * <Item> $
<Item> -> <Factor> / <Item> $
<Item> -> <Factor> $

<Factor> -> num $
<Factor> -> ( <AddExprsn> ) $
<Factor> -> ID $
<Factor> -> ID <FuncCall> $

<FuncCall> -> ( <ActualArgs> ) $

<ActualArgs> -> <ArgList> $
<ActualArgs> -> void $
<ActualArgs> -> ε $

<ArgList> -> <AddExprsn> , <ArgList> $
<ArgList> -> <AddExprsn> $
